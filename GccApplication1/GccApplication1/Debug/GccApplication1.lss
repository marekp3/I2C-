
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001be  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006a  0080006a  0000025c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d7  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000072e  00000000  00000000  00000d27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000487  00000000  00000000  00001455  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  000018dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ee  00000000  00000000  000019b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000189  00000000  00000000  00001da2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001f2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee eb       	ldi	r30, 0xBE	; 190
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ab 36       	cpi	r26, 0x6B	; 107
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	65 d0       	rcall	.+202    	; 0x124 <main>
  5a:	af c0       	rjmp	.+350    	; 0x1ba <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <I2C_SetBusSpeed>:
{
	TWCR=_BV(TWINT) | _BV(TWEN);
	I2C_WaitForComplete();
	if (TW_STATUS!=TW_MR_DATA_NACK) I2C_SetError(I2C_NoACK);
	return TWDR;
}
  5e:	9c 01       	movw	r18, r24
  60:	40 e0       	ldi	r20, 0x00	; 0
  62:	50 e0       	ldi	r21, 0x00	; 0
  64:	60 e8       	ldi	r22, 0x80	; 128
  66:	78 e3       	ldi	r23, 0x38	; 56
  68:	81 e0       	ldi	r24, 0x01	; 1
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	84 d0       	rcall	.+264    	; 0x176 <__udivmodsi4>
  6e:	da 01       	movw	r26, r20
  70:	c9 01       	movw	r24, r18
  72:	40 97       	sbiw	r24, 0x10	; 16
  74:	a1 09       	sbc	r26, r1
  76:	b1 09       	sbc	r27, r1
  78:	b6 95       	lsr	r27
  7a:	a7 95       	ror	r26
  7c:	97 95       	ror	r25
  7e:	87 95       	ror	r24
  80:	9c 01       	movw	r18, r24
  82:	8f 3f       	cpi	r24, 0xFF	; 255
  84:	91 05       	cpc	r25, r1
  86:	61 f0       	breq	.+24     	; 0xa0 <I2C_SetBusSpeed+0x42>
  88:	58 f0       	brcs	.+22     	; 0xa0 <I2C_SetBusSpeed+0x42>
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	8f 5f       	subi	r24, 0xFF	; 255
  8e:	36 95       	lsr	r19
  90:	27 95       	ror	r18
  92:	36 95       	lsr	r19
  94:	27 95       	ror	r18
  96:	2f 3f       	cpi	r18, 0xFF	; 255
  98:	31 05       	cpc	r19, r1
  9a:	09 f0       	breq	.+2      	; 0x9e <I2C_SetBusSpeed+0x40>
  9c:	b8 f7       	brcc	.-18     	; 0x8c <I2C_SetBusSpeed+0x2e>
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <I2C_SetBusSpeed+0x44>
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	91 b1       	in	r25, 0x01	; 1
  a4:	93 70       	andi	r25, 0x03	; 3
  a6:	89 2b       	or	r24, r25
  a8:	81 b9       	out	0x01, r24	; 1
  aa:	20 b9       	out	0x00, r18	; 0
  ac:	08 95       	ret

000000ae <I2C_Init>:
  ae:	84 e4       	ldi	r24, 0x44	; 68
  b0:	86 bf       	out	0x36, r24	; 54
  b2:	60 ea       	ldi	r22, 0xA0	; 160
  b4:	7f e0       	ldi	r23, 0x0F	; 15
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	d1 df       	rcall	.-94     	; 0x5e <I2C_SetBusSpeed>
  bc:	08 95       	ret

000000be <I2C_WaitForComplete>:
  be:	06 b6       	in	r0, 0x36	; 54
  c0:	07 fe       	sbrs	r0, 7
  c2:	fd cf       	rjmp	.-6      	; 0xbe <I2C_WaitForComplete>
  c4:	08 95       	ret

000000c6 <I2C_Start>:
  c6:	84 ea       	ldi	r24, 0xA4	; 164
  c8:	86 bf       	out	0x36, r24	; 54
  ca:	f9 df       	rcall	.-14     	; 0xbe <I2C_WaitForComplete>
  cc:	81 b1       	in	r24, 0x01	; 1
  ce:	88 7f       	andi	r24, 0xF8	; 248
  d0:	88 30       	cpi	r24, 0x08	; 8
  d2:	19 f0       	breq	.+6      	; 0xda <I2C_Start+0x14>
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
  da:	08 95       	ret

000000dc <I2C_SendAddr>:
  dc:	83 b9       	out	0x03, r24	; 3
  de:	84 e8       	ldi	r24, 0x84	; 132
  e0:	86 bf       	out	0x36, r24	; 54
  e2:	ed df       	rcall	.-38     	; 0xbe <I2C_WaitForComplete>
  e4:	81 b1       	in	r24, 0x01	; 1
  e6:	88 7f       	andi	r24, 0xF8	; 248
  e8:	80 34       	cpi	r24, 0x40	; 64
  ea:	19 f0       	breq	.+6      	; 0xf2 <I2C_SendAddr+0x16>
  ec:	84 e0       	ldi	r24, 0x04	; 4
  ee:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
  f2:	08 95       	ret

000000f4 <I2C_ReceiveData_ACK>:

uint8_t I2C_ReceiveData_ACK()
{
	TWCR = _BV(TWEA) | _BV(TWINT) | _BV(TWEN);
  f4:	84 ec       	ldi	r24, 0xC4	; 196
  f6:	86 bf       	out	0x36, r24	; 54
	I2C_WaitForComplete();
  f8:	e2 df       	rcall	.-60     	; 0xbe <I2C_WaitForComplete>
	if(TW_STATUS!=TW_MR_DATA_ACK) I2C_SetError(I2C_NoACK);
  fa:	81 b1       	in	r24, 0x01	; 1
  fc:	88 7f       	andi	r24, 0xF8	; 248
  fe:	80 35       	cpi	r24, 0x50	; 80
 100:	19 f0       	breq	.+6      	; 0x108 <I2C_ReceiveData_ACK+0x14>
void I2C_Stop()
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
} 
	
inline void I2C_SetError(uint8_t err) { I2C_Error=err;};
 102:	84 e0       	ldi	r24, 0x04	; 4
 104:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
uint8_t I2C_ReceiveData_ACK()
{
	TWCR = _BV(TWEA) | _BV(TWINT) | _BV(TWEN);
	I2C_WaitForComplete();
	if(TW_STATUS!=TW_MR_DATA_ACK) I2C_SetError(I2C_NoACK);
	return TWDR;
 108:	83 b1       	in	r24, 0x03	; 3
}
 10a:	08 95       	ret

0000010c <I2C_SendByte>:

void I2C_SendByte(uint8_t byte)
{
	TWDR = byte;
 10c:	83 b9       	out	0x03, r24	; 3
	TWCR = _BV(TWINT) | _BV(TWEN);
 10e:	84 e8       	ldi	r24, 0x84	; 132
 110:	86 bf       	out	0x36, r24	; 54
	I2C_WaitForComplete();
 112:	d5 df       	rcall	.-86     	; 0xbe <I2C_WaitForComplete>
	if(TW_STATUS!=TW_MT_DATA_ACK) I2C_SetError(I2C_NoACK);
 114:	81 b1       	in	r24, 0x01	; 1
 116:	88 7f       	andi	r24, 0xF8	; 248
 118:	88 32       	cpi	r24, 0x28	; 40
 11a:	19 f0       	breq	.+6      	; 0x122 <I2C_SendByte+0x16>
void I2C_Stop()
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
} 
	
inline void I2C_SetError(uint8_t err) { I2C_Error=err;};
 11c:	84 e0       	ldi	r24, 0x04	; 4
 11e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 122:	08 95       	ret

00000124 <main>:



int main(void)
{
	DDRC = DDRC | 0b00000001;
 124:	a0 9a       	sbi	0x14, 0	; 20
	PORTC = PORTC | 0b00000001;
 126:	a8 9a       	sbi	0x15, 0	; 21
	DDRD = 0xFF;
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	81 bb       	out	0x11, r24	; 17
	PORTD=0xFF;
 12c:	82 bb       	out	0x12, r24	; 18
	I2C_Init();
 12e:	bf df       	rcall	.-130    	; 0xae <I2C_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	89 e6       	ldi	r24, 0x69	; 105
 134:	98 e1       	ldi	r25, 0x18	; 24
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x12>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x1c>
 140:	00 00       	nop
	uint8_t address = 0x68;
	static uint8_t DIGITS[10] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x67};
	while(1)
    {
		
		I2C_Start();
 142:	c1 df       	rcall	.-126    	; 0xc6 <I2C_Start>
		I2C_SendAddr((address<<1) | 0b00000000);
 144:	80 ed       	ldi	r24, 0xD0	; 208
 146:	ca df       	rcall	.-108    	; 0xdc <I2C_SendAddr>
		I2C_SendByte(0x00);
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	e0 df       	rcall	.-64     	; 0x10c <I2C_SendByte>
		I2C_Start();
 14c:	bc df       	rcall	.-136    	; 0xc6 <I2C_Start>
		I2C_SendAddr((address<<1) | 0b00000001);
 14e:	81 ed       	ldi	r24, 0xD1	; 209
 150:	c5 df       	rcall	.-118    	; 0xdc <I2C_SendAddr>
		cos = I2C_ReceiveData_ACK();
 152:	d0 df       	rcall	.-96     	; 0xf4 <I2C_ReceiveData_ACK>
		cos = cos & 0b00001111;
		PORTD=DIGITS[cos];
 154:	8f 70       	andi	r24, 0x0F	; 15
 156:	e8 2f       	mov	r30, r24
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	e0 5a       	subi	r30, 0xA0	; 160
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	80 81       	ld	r24, Z
 160:	82 bb       	out	0x12, r24	; 18
 162:	2f e7       	ldi	r18, 0x7F	; 127
 164:	88 e3       	ldi	r24, 0x38	; 56
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0x44>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0x4e>
 172:	00 00       	nop
 174:	e6 cf       	rjmp	.-52     	; 0x142 <main+0x1e>

00000176 <__udivmodsi4>:
 176:	a1 e2       	ldi	r26, 0x21	; 33
 178:	1a 2e       	mov	r1, r26
 17a:	aa 1b       	sub	r26, r26
 17c:	bb 1b       	sub	r27, r27
 17e:	fd 01       	movw	r30, r26
 180:	0d c0       	rjmp	.+26     	; 0x19c <__udivmodsi4_ep>

00000182 <__udivmodsi4_loop>:
 182:	aa 1f       	adc	r26, r26
 184:	bb 1f       	adc	r27, r27
 186:	ee 1f       	adc	r30, r30
 188:	ff 1f       	adc	r31, r31
 18a:	a2 17       	cp	r26, r18
 18c:	b3 07       	cpc	r27, r19
 18e:	e4 07       	cpc	r30, r20
 190:	f5 07       	cpc	r31, r21
 192:	20 f0       	brcs	.+8      	; 0x19c <__udivmodsi4_ep>
 194:	a2 1b       	sub	r26, r18
 196:	b3 0b       	sbc	r27, r19
 198:	e4 0b       	sbc	r30, r20
 19a:	f5 0b       	sbc	r31, r21

0000019c <__udivmodsi4_ep>:
 19c:	66 1f       	adc	r22, r22
 19e:	77 1f       	adc	r23, r23
 1a0:	88 1f       	adc	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	1a 94       	dec	r1
 1a6:	69 f7       	brne	.-38     	; 0x182 <__udivmodsi4_loop>
 1a8:	60 95       	com	r22
 1aa:	70 95       	com	r23
 1ac:	80 95       	com	r24
 1ae:	90 95       	com	r25
 1b0:	9b 01       	movw	r18, r22
 1b2:	ac 01       	movw	r20, r24
 1b4:	bd 01       	movw	r22, r26
 1b6:	cf 01       	movw	r24, r30
 1b8:	08 95       	ret

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
